package trans

/*
	Модуль предоставляет примитвы для симуляции транзисторов
	база -- логический вход (база транзистора). Может плавать, может иметь подтяжку к земле и питанию
	коллектор -- логический выход (инвертор). Если база не задана -- может плавать
	эмиттер -- логический выход (повторитель). Если нет сигнала на базе -- может плавать.
	---------
	Все входы выходы описываются тремя состояниями:
		уровень питания (1)
		уровень нуля (0)
		безразлично (-1)
*/

import (
	мФмт "fmt"
	мРнд "math/rand"
	мСинх "sync"
)

//ТТранс -- базовый тип для симуляции транзистора
type ТТранс struct {
	база   int8
	подтяж int8 //Подяжка по базе
	кол    int8
	эм     int8
	блок   мСинх.RWMutex
}

//ТрансНов -- возвращает указатель но новый ТТранс
func ТрансНов(пПодтяжка int8) (транс *ТТранс) {
	_транс := ТТранс{}
	_транс.ПодтяжкаУст(пПодтяжка)
	return &_транс
}

//БазаУст -- устанавливает значение базы транзистора
func (сам *ТТранс) БазаУст(пЗнач int8) {
	defer сам.блок.Unlock()
	сам.блок.Lock()
	if !(-1 <= пЗнач && пЗнач <= 1) {
		panic(мФмт.Errorf("ТТранс.БазаУст(): ФАТАЛЬНЫЙ СБОЙ пЗнач(%v) вне диапзона (-1...1)\n", пЗнач))
	}
	сам.база = пЗнач
	if пЗнач == -1 { //Если сигнал снят -- проверим по подтяжке
		сам._БазаУст(сам.подтяж)
		return
	}
	сам._БазаУст(сам.база)
}

//ПодтяжкаУст -- устанавливает подтяжку по базе
func (сам *ТТранс) ПодтяжкаУст(пПодтяж int8) {
	defer сам.блок.Unlock()
	сам.блок.Lock()
	if !(-1 <= пПодтяж && пПодтяж <= 1) {
		panic(мФмт.Errorf("ТТранс.ПодтяжУст(): ФАТАЛЬНЫЙ СБОЙ пПодтяж(%v) вне диапзона (-1...1)\n", пПодтяж))
	}
	сам.подтяж = пПодтяж
	if сам.база == -1 {
		сам._БазаУст(пПодтяж)
	}
}

func (сам *ТТранс) _БазаУст(пБаза int8) {
	if пБаза == -1 {
		сам.база = int8(мРнд.Int31n(3))
		if сам.база == 2 {
			сам.база = -1
		}
	} else {
		сам.база = пБаза
	}
	switch сам.база {
	case 1:
		сам.кол = 0
		сам.эм = 1
	default:
		сам.кол = 1
		сам.эм = 0
	}
}

//База -- возвращает хранимое значение базы
func (сам *ТТранс) База() int8 {
	defer сам.блок.RUnlock()
	сам.блок.RLock()
	return сам.база
}

//Кол -- возвращает хранимое значение коллектора
func (сам *ТТранс) Кол() int8 {
	defer сам.блок.RUnlock()
	сам.блок.RLock()
	return сам.кол
}

//Эм -- возвращает хранимое значение эммитера
func (сам *ТТранс) Эм() int8 {
	defer сам.блок.RUnlock()
	сам.блок.RLock()
	return сам.эм
}

//Подтяжка -- возвращает хранимое значение подтяжки
func (сам *ТТранс) Подтяжка() int8 {
	defer сам.блок.RUnlock()
	сам.блок.RLock()
	return сам.подтяж
}
